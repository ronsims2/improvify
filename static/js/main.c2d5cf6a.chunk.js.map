{"version":3,"sources":["components/error-page/ErrorPage.js","utils/maths.js","components/rounding/Rounding.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["ErrorPage","roundToLargerNumber","x","place","numString","String","length","parseInt","generateQuestion","number","Math","ceil","random","Array","fill","join","Rounding","q","canvasRef","useRef","useState","answer","setAnswer","question","setQuestion","resolution","setResolution","setPlace","answerHistory","setAnswerHistory","isDone","setIsDone","handleCorrectAnswer","solution","newAnswerHistory","correct","localStorage","setItem","JSON","stringify","handleIncorrectAnswer","console","log","getNext","e","preventDefault","className","mode","onClick","showAlert","style","visibility","display","width","height","ref","filter","value","onChange","val","target","placeholder","num","col","isNaN","roundDeciderIndex","roundDecision","substring","round","qrContent","Date","qrcode","toCanvas","current","err","Routes","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2d5cf6a.chunk.js","sourcesContent":["import React from 'react'\n\nconst ErrorPage = () => {\n    return (\n        <div>Error - </div>\n    )\n}\n\nexport default ErrorPage","/**\n *\n * @param x - The number to round\n * @param place the number of place to round starting at the 10\n * @returns {number}\n */\nexport const round = (x, place) => {\n    const num = String(x)\n    const col = String(place)\n\n    if (isNaN(parseInt(num)) || isNaN(parseInt(col))) {\n        return\n    }\n\n    if (place < 10) {\n        return x\n    }\n\n    if (place > x) {\n        return roundToLargerNumber(x, place)\n    }\n\n    const roundDeciderIndex = num.length - (col.length - 1)\n    const roundDecision = parseInt(num[roundDeciderIndex])\n\n    let solution = parseInt(num.substring(0, num.length - (col.length- 1)))\n\n    solution = roundDecision >= 5 ? solution + 1 : solution\n    const finalSolution = parseInt(`${solution}${Array(col.length - 1).fill('0').join('')}`)\n\n    return finalSolution\n}\n\nconst roundToLargerNumber = (x, place) => {\n    const numString = String(x)\n    const placeString = String(place)\n    const placeDiff = placeString.length - numString.length\n\n    if (placeDiff > 1) {\n        return 0\n    }\n\n    const roundDecision = parseInt(numString[0]) >= 5 ? place : 0\n\n    return roundDecision\n}","import React, { useState, useRef } from 'react'\nimport { round } from '../../utils/maths'\nimport qrcode from 'qrcode'\n\nimport './Rounding.css'\n\nconst instructions = `Round the number to the nearest place value specified. Use a sheet of paper to work out your answer. Click \"Submit\" to check your answer. Click \"I'm done\" to quit.`\n\nconst generateQuestion = () => {\n    const number = Math.ceil(Math.random() * 10000)\n    let place = Math.ceil(Math.random() * String(number).length)\n    place = parseInt(`1${Array(place).fill('0').join('')}`)\n    return [number, place]\n}\n\nconst Rounding = () => {\n    const q = generateQuestion()\n    const canvasRef = useRef(null)\n    const [answer, setAnswer] = useState('')\n    const [question, setQuestion] = useState(q[0])\n    const [resolution, setResolution] = useState(null)\n    const [place, setPlace] = useState(q[1])\n    const [answerHistory, setAnswerHistory] = useState([])\n    const [isDone, setIsDone] = useState(false)\n\n    const handleAnswer = (e) => {\n        const val = e.target.value\n        setAnswer(val)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        const solution = round(question, place)\n        if (parseInt(answer) === solution) {\n            handleCorrectAnswer(question, place, solution, answer)\n        }\n        else {\n            handleIncorrectAnswer(question, place, solution, answer)\n        }\n    }\n\n    const handleCorrectAnswer = (question, place, solution, answer) => {\n        const newAnswerHistory = [...answerHistory, {question, place, solution, answer, correct: true}]\n        localStorage.setItem('answerHistory', JSON.stringify(newAnswerHistory))\n        setResolution(1)\n        setAnswerHistory(newAnswerHistory)\n    }\n\n    const handleIncorrectAnswer = (question, place, solution,  answer) => {\n        const newAnswerHistory = [...answerHistory, {question, place, solution, answer, correct: false}]\n        console.log(`Your answer: ${answer} vs the solution: ${solution}`)\n        localStorage.setItem('answerHistory', JSON.stringify(newAnswerHistory))\n        setResolution(0)\n        setAnswerHistory(newAnswerHistory)\n    }\n\n    const handleDone = () => {\n        // generate QR code for parents\n        setResolution(null)\n        setIsDone(true)\n        const qrContent = `Your kid Answered ${answerHistory.filter(x => x.correct === true).length} of ${answerHistory.length} rounding problems correctly on ${new Date()}`\n        qrcode.toCanvas(canvasRef.current, qrContent, (err) => console.log(err))\n    }\n\n    const getNext = (e) => {\n        e.preventDefault()\n        setResolution(null)\n        const q = generateQuestion()\n        setQuestion(q[0])\n        setPlace(q[1])\n        setAnswer('')\n    }\n\n    const showAlert = (mode) => {\n        switch (mode) {\n            case 0:\n                return (<div className={'alert alert-danger'}>🐳🐳🐳 Incorrect - No worries, this isn't a test, its just practice. <button className={'btn btn-danger'} onClick={getNext}>Skip this one</button></div>)\n            case 1:\n                return (<div className={'alert alert-success'}>🎉🎉🎉 Yay! You got it right, keep it up! <button className={'btn btn-success'} onClick={getNext}>Next</button></div>)\n            default:\n                return null\n        }\n    }\n\n    return (\n        <>\n            <div className={'row'}>\n                <div className={'col-md'}>\n                    <h1>Rounding</h1>\n                    <h4>Instructions</h4>\n                    <p>{instructions}</p>\n                </div>\n            </div>\n            <div className={'row'}>\n                <div className={'col-md'}>\n                    {showAlert(resolution)}\n                </div>\n            </div>\n            <div className={'row'}>\n                <div style={{visibility: isDone ? 'visible' : 'hidden', display: isDone ? 'block': 'none'}} className={'col-md text-center'}>\n                    <h4>Show this to your parents so they can scan it.</h4>\n                    <canvas width={400} height={400} ref={canvasRef}></canvas>\n                </div>\n            </div>\n            <div style={{visibility: !isDone ? 'visible' : 'hidden', display: !isDone ? 'block': 'none'}} className={'card'}>\n                <div className={'card-body'}>\n                    <div className={'score-box'}>\n                        Score: {answerHistory.filter(x => x.correct === true).length}\n                    </div>\n                    <hr/>\n                    <div>Round <span className='question'>{question}</span> to the nearest <span className='place'>{place}</span></div>\n                    <p className={'card-text'}><input className={'form-control'} value={answer} onChange={handleAnswer} placeholder={'Enter your answer here'}/></p>\n                        <button className={'btn btn-primary btn-lg btn-block'} onClick={handleSubmit}>Submit</button>\n                        <button className={'btn btn-warning btn-lg btn-block'} onClick={handleDone}>I'm Done</button>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Rounding","import React from 'react'\nimport { HashRouter as Router, Switch, Route} from 'react-router-dom'\nimport ErrorPage from './components/error-page/ErrorPage'\nimport Rounding from './components/rounding/Rounding'\n\nconst Routes = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route path={'/rounding'} component={Rounding} />\n                <Route path={'/'} component={ErrorPage} />\n            </Switch>\n        </Router>\n    )\n}\n\nexport default Routes\n","import React from 'react';\nimport Routes from './Routes'\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className=\"container\">\n        <main>\n          <Routes/>\n        </main>\n      </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}