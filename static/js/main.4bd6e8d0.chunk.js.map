{"version":3,"sources":["components/error-page/ErrorPage.js","utils/maths.js","components/rounding/Rounding.js","components/bucket/Bucket.js","components/places/Places.js","components/welcome/Welcome.js","components/start-page/StartPage.js","components/estimate-line/EstimateLine.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["ErrorPage","round","x","place","num","String","col","isNaN","parseInt","roundToLargerNumber","roundDeciderIndex","length","roundDecision","solution","substring","Array","fill","join","numString","activityId","instructions","generateQuestion","number","Math","ceil","random","Rounding","q","canvasRef","useRef","useState","answer","setAnswer","question","setQuestion","resolution","setResolution","setPlace","answerHistory","setAnswerHistory","isDone","setIsDone","questionCount","setQuestionCount","handleCorrectAnswer","newAnswerHistory","correct","sessionStorage","setItem","JSON","stringify","handleIncorrectAnswer","console","log","getNext","e","preventDefault","className","mode","onClick","showAlert","style","visibility","display","width","height","ref","filter","value","onChange","val","target","placeholder","kid","getItem","qrContent","Date","qrcode","toCanvas","current","err","Bucket","props","count","emoji","recalc","total","setTotal","bump","amount","newAmount","disabled","truncToFit","a","b","substr","Places","dummy","initialTotal","initialDummyTotal","snipped","split","dummyTotal","setDummyTotal","emojis","pos","workingTotalArray","reverse","workingTotal","forEach","item","i","itemAmount","myDummyTotal","myTotal","mySnipped","numberToWords","toWords","replace","map","itemPlace","key","window","scrollTo","Welcome","saveName","name","userName","setUserName","isValid","setIsValid","handleSetName","n","handleSaveName","trim","required","showWelcome","StartPage","localStorage","setName","to","EstimateLine","lineCanvasRef","initialQuestion","randomInt","useEffect","ctx","getContext","beginPath","moveTo","lineTo","stroke","font","fillText","newQuestion","dims","getBoundingClientRect","clientX","clientY","trunc","left","y","top","guess","abs","diff","threshold","Routes","path","component","App","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4bd6e8d0.chunk.js","sourcesContent":["import React from 'react'\n\nconst ErrorPage = () => {\n    return (\n        <div>Error - </div>\n    )\n}\n\nexport default ErrorPage","/**\n *\n * @param x - The number to round\n * @param place the number of place to round starting at the 10\n * @returns {number}\n */\nexport const round = (x, place) => {\n    const num = String(x)\n    const col = String(place)\n\n    if (isNaN(parseInt(num)) || isNaN(parseInt(col))) {\n        return\n    }\n\n    if (place < 10) {\n        return x\n    }\n\n    if (place > x) {\n        return roundToLargerNumber(x, place)\n    }\n\n    const roundDeciderIndex = num.length - (col.length - 1)\n    const roundDecision = parseInt(num[roundDeciderIndex])\n\n    let solution = parseInt(num.substring(0, num.length - (col.length- 1)))\n\n    solution = roundDecision >= 5 ? solution + 1 : solution\n    const finalSolution = parseInt(`${solution}${Array(col.length - 1).fill('0').join('')}`)\n\n    return finalSolution\n}\n\nconst roundToLargerNumber = (x, place) => {\n    const numString = String(x)\n    const placeString = String(place)\n    const placeDiff = placeString.length - numString.length\n\n    if (placeDiff > 1) {\n        return 0\n    }\n\n    const roundDecision = parseInt(numString[0]) >= 5 ? place : 0\n\n    return roundDecision\n}","import React, { useState, useRef } from 'react'\nimport { round } from '../../utils/maths'\nimport qrcode from 'qrcode'\n\nimport './Rounding.css'\n\nconst activityId = 'rounding'\nconst instructions = `Round the number to the nearest place value specified. Use a sheet of paper to work out your answer. Click \"Submit\" to check your answer. Click \"I'm done\" to quit.`\n\nfunction generateQuestion() {\n    const number = Math.ceil(Math.random() * 10000)\n    let place = Math.ceil(Math.random() * String(number).length)\n    place = parseInt(`1${Array(place).fill('0').join('')}`)\n    return [number, place]\n}\n\nfunction Rounding () {\n    const q = generateQuestion()\n    const canvasRef = useRef(null)\n    const [answer, setAnswer] = useState('')\n    const [question, setQuestion] = useState(q[0])\n    const [resolution, setResolution] = useState(null)\n    const [place, setPlace] = useState(q[1])\n    const [answerHistory, setAnswerHistory] = useState([])\n    const [isDone, setIsDone] = useState(false)\n    const [questionCount, setQuestionCount] = useState(1)\n\n    const handleAnswer = (e) => {\n        const val = e.target.value\n        setAnswer(val)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        const solution = round(question, place)\n        if (parseInt(answer) === solution) {\n            handleCorrectAnswer(question, place, solution, answer)\n        }\n        else {\n            handleIncorrectAnswer(question, place, solution, answer)\n        }\n    }\n\n    const handleCorrectAnswer = (question, place, solution, answer) => {\n        const newAnswerHistory = [...answerHistory, {question, place, solution, answer, activityId, correct: true}]\n        sessionStorage.setItem('answerHistory', JSON.stringify(newAnswerHistory))\n        setResolution(1)\n        setAnswerHistory(newAnswerHistory)\n    }\n\n    const handleIncorrectAnswer = (question, place, solution,  answer) => {\n        const newAnswerHistory = [...answerHistory, {question, place, solution, answer, activityId, correct: false}]\n        console.log(`Your answer: ${answer} vs the solution: ${solution}`)\n        sessionStorage.setItem('answerHistory', JSON.stringify(newAnswerHistory))\n        setResolution(0)\n        setAnswerHistory(newAnswerHistory)\n    }\n\n    const handleDone = () => {\n        // generate QR code for parents\n        const kid = sessionStorage.getItem('userName') || 'Your kid'\n        setResolution(null)\n        setIsDone(true)\n        const qrContent = `${kid} answered ${answerHistory.filter(x => x.correct === true && x.activityId === activityId).length} of ${answerHistory.length} rounding problems correctly on ${new Date()}`\n        qrcode.toCanvas(canvasRef.current, qrContent, (err) => console.log(err))\n    }\n\n    const getNext = (e) => {\n        e.preventDefault()\n        setResolution(null)\n        setQuestionCount(questionCount + 1)\n        const q = generateQuestion()\n        setQuestion(q[0])\n        setPlace(q[1])\n        setAnswer('')\n    }\n\n    const showAlert = (mode) => {\n        switch (mode) {\n            case 0:\n                return (<div className={'alert alert-danger'}>🐳🐳🐳 Incorrect - No worries, this isn't a test, its just practice. <button className={'btn btn-danger'} onClick={getNext}>Skip this one</button></div>)\n            case 1:\n                return (<div className={'alert alert-success'}>🎉🎉🎉 Yay! You got it right, keep it up! <button className={'btn btn-success'} onClick={getNext}>Next</button></div>)\n            default:\n                return null\n        }\n    }\n\n    return (\n        <>\n            <div className={'row'}>\n                <div className={'col-md-10'}>\n                    <h2>Rounding Big Numbers</h2>\n                    <h4>Instructions</h4>\n                    <p>{instructions}</p>\n                </div>\n                <div className={'col-md-2 question-no'}>Question #: {questionCount}</div>\n            </div>\n            <div className={'row'}>\n                <div className={'col-md'}>\n                    {showAlert(resolution)}\n                </div>\n            </div>\n            <div className={'row'}>\n                <div style={{visibility: isDone ? 'visible' : 'hidden', display: isDone ? 'block': 'none'}} className={'col-md text-center'}>\n                    <h4>Show this to an adult so they can scan it.</h4>\n                    <canvas width={400} height={400} ref={canvasRef}></canvas>\n                </div>\n            </div>\n            <div style={{visibility: !isDone ? 'visible' : 'hidden', display: !isDone ? 'block': 'none'}} className={'card'}>\n                <div className={'card-body'}>\n                    <div className={'score-box'}>\n                        Score: {answerHistory.filter(x => x.correct === true).length}\n                    </div>\n                    <hr/>\n                    <div>Round <span className='question'>{question}</span> to the nearest <span className='place'>{place}</span></div>\n                    <p className={'card-text'}><input className={'form-control'} value={answer} onChange={handleAnswer} placeholder={'Enter your answer here'}/></p>\n                        <button className={'btn btn-primary btn-lg btn-block'} onClick={handleSubmit}>Submit</button>\n                        <button className={'btn btn-warning btn-lg btn-block'} onClick={handleDone}>I'm Done</button>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Rounding","import React, { useState, useEffect } from 'react'\n\nimport './Bucket.css'\n\nfunction Bucket (props) {\n    const {place, count, recalc, emoji } = props\n\n    const [total, setTotal] = useState(count)\n\n    const bump = (e, amount) => {\n        e.preventDefault()\n        const newAmount = total + amount\n        console.log(place, newAmount)\n        if (newAmount === 10) {\n            setTotal(0)\n        }\n        else {\n            setTotal(newAmount)\n        }\n\n        props.recalc(newAmount, place)\n    }\n\n    return (\n        <div className={'col-sm-2 bucket'}>\n            <div className={'row'}>\n                <div className={'col-sm total-box'}>\n                    {Array(total).fill(emoji).join('')}\n                </div>\n            </div>\n            <div className={'row'}>\n                <div className={'col-sm bucket-header'}>\n                    {`${place}s`}\n                </div>\n            </div>\n            <div className={'row'}>\n                <div className={'col-sm'}>\n                    <button onClick={(e) => bump(e,1)} className={'btn btn-primary bucket-btn'} disabled={total === 10}>+</button>\n                    <button onClick={(e) => bump(e,-1)} className={'btn btn-warning bucket-btn'} disabled={total === 0}>-</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Bucket","import React, { useState, useRef } from 'react'\nimport Bucket from '../bucket/Bucket'\nimport  numberToWords from 'number-to-words'\n\nimport './Places.css'\nimport qrcode from \"qrcode\";\n\nconst activityId = 'places'\nconst instructions = (<p>Each emoji represents one place value unit. Use the <strong>PLUS (+)</strong> and <strong>MINUS (-)</strong> button top adjust the emojis so that the total matches the <span className={'highlight'}>BLUE</span> number below.\n    <br/><br/>Click the submit button to check your answer.</p>)\n\nconst truncToFit = (a, b) => {\n    if (a.length > b.length) {\n        return [a.substr(0, b.length), b]\n    }\n    if (b.length > a.length) {\n        return [a, b.substr(0, a.length)]\n    }\n\n    return [a, b]\n}\n\nfunction Places (props) {\n    const initialTotal = String(Math.ceil(Math.random() * 1000000))\n    const initialDummyTotal = String(Math.ceil(Math.random() * 1000000))\n    const snipped = truncToFit(initialTotal, initialDummyTotal)\n\n    const [resolution, setResolution] = useState(null)\n    const [total, setTotal] = useState(snipped[0].split(''))\n    const [dummyTotal, setDummyTotal] = useState(snipped[1].split(''))\n    const [emojis, setEmojis] = useState(['🍏', '🍔', '🍪', '🥐', '🥯', '🍗', '🥩', '🍎', '🌯', '🌮', '🥙', '🌭', '🥮', '🍅', '🍩'])\n    const [answerHistory, setAnswerHistory] = useState([])\n    const [isDone, setIsDone] = useState(false)\n    const [questionCount, setQuestionCount] = useState(1)\n    const canvasRef = useRef(null)\n\n    const recalc = (num, place) => {\n        const pos = place.length - 1\n\n        const workingTotalArray = [...dummyTotal].reverse()\n        let workingTotal = 0\n\n        workingTotalArray.forEach((item, i) => {\n            let itemAmount = parseInt(item)\n            if (i === pos) {\n                //add in increase\n                if (num !== itemAmount) {\n                    itemAmount = num\n                }\n            }\n\n            // Use Multiply\n            itemAmount = itemAmount * parseInt(`1${Array(i).fill('0').join('')}`)\n\n            workingTotal += itemAmount\n        })\n\n        setDummyTotal(String(workingTotal).split(''))\n    }\n\n    const getNext = (e) => {\n        e.preventDefault()\n        setResolution(null)\n        setQuestionCount(questionCount + 1)\n        const myDummyTotal = String(Math.ceil(Math.random() * 1000000))\n        const myTotal = String(Math.ceil(Math.random() * 1000000))\n        const mySnipped = truncToFit(myTotal, myDummyTotal)\n        setTotal(mySnipped[0].split(''))\n        setDummyTotal(mySnipped[1].split(''))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        const myTotal = parseInt(total.join(''))\n        const myDummyTotal = parseInt(dummyTotal.join(''))\n\n        window.scrollTo(0, 0)\n\n        if (myDummyTotal === myTotal) {\n            handleCorrectAnswer(myTotal, myDummyTotal)\n        }\n        else {\n            handleIncorrectAnswer(myTotal, myDummyTotal)\n        }\n    }\n\n    const handleDone = () => {\n        // generate QR code for parents\n        const kid = sessionStorage.getItem('userName') || 'Your kid'\n        setResolution(null)\n        setIsDone(true)\n        const qrContent = `${kid} answered ${answerHistory.filter(x => x.correct === true && x.activityId === activityId).length} of ${answerHistory.length} place value problems correctly on ${new Date()}`\n        qrcode.toCanvas(canvasRef.current, qrContent, (err) => console.log(err))\n    }\n\n    const handleCorrectAnswer = (question, answer) => {\n        const newAnswerHistory = [...answerHistory, {question, answer, activityId, correct: true}]\n        sessionStorage.setItem('answerHistory', JSON.stringify(newAnswerHistory))\n        setResolution(1)\n        setAnswerHistory(newAnswerHistory)\n    }\n\n    const handleIncorrectAnswer = (question,  answer) => {\n        const newAnswerHistory = [...answerHistory, {question, answer, activityId, correct: false}]\n        sessionStorage.setItem('answerHistory', JSON.stringify(newAnswerHistory))\n        setResolution(0)\n        setAnswerHistory(newAnswerHistory)\n    }\n\n    const generateBuckets = (dummy) => {\n        console.log(dummy)\n        const comps = [...dummy].reverse().map((item, i) => {\n            const itemPlace = `1${Array(i).fill('0').join('')}`\n\n            return (\n                <Bucket key={item + itemPlace + emojis[i]} place={itemPlace} count={parseInt(item)} recalc={recalc} emoji={emojis[i]}/>\n            )\n        })\n\n        return comps.reverse()\n    }\n\n    const showAlert = (mode) => {\n        switch (mode) {\n            case 0:\n                return (<div className={'alert alert-danger'}>🐳🐳🐳 Incorrect - No worries, this isn't a test, its just practice. <button className={'btn btn-danger'} onClick={getNext}>Skip this one</button></div>)\n            case 1:\n                return (<div className={'alert alert-success'}>🎉🎉🎉 Yay! You got it right, keep it up! <button className={'btn btn-success'} onClick={getNext}>Next</button></div>)\n            default:\n                return null\n        }\n    }\n\n    return (\n        <>\n            <div className={'row'}>\n                <div className={'col-md-10'}>\n                    <h2>Place Values</h2>\n                    <h4>Instructions</h4>\n                    {instructions}\n                </div>\n                <div className={'col-md-2 question-no'}>Question #: {questionCount}</div>\n            </div>\n            <div className={'row'}>\n                <div className={'col-md target-number'}><span className={'target-number-pre'}>Match this number: </span>{numberToWords.toWords(parseInt(total.join(''))).replace(/,/g, '')}</div>\n            </div>\n            <div className={'row'}>\n                <div className={'col-md'}>\n                    {showAlert(resolution)}\n                </div>\n            </div>\n            <div className={'row'}>\n                <div style={{visibility: isDone ? 'visible' : 'hidden', display: isDone ? 'block': 'none'}} className={'col-md text-center'}>\n                    <h4>Show this to an adult so they can scan it.</h4>\n                    <canvas width={400} height={400} ref={canvasRef}></canvas>\n                </div>\n            </div>\n            <div style={{visibility: !isDone ? 'visible' : 'hidden', display: !isDone ? '': 'none'}} className={'row'}>\n                {generateBuckets(dummyTotal)}\n            </div>\n            <div className={'row btn-row'}>\n                <div className={'col-md-4'}></div>\n                <div className={'col-md-4'}>\n                    <button className={'btn btn-primary btn-lg btn-block'} onClick={handleSubmit}>Submit</button>\n                    <button className={'btn btn-warning btn-lg btn-block'} onClick={handleDone}>I'm Done</button>\n                </div>\n                <div className={'col-md-4'}></div>\n            </div>\n        </>\n    )\n}\n\nexport default Places","import React, { useState } from 'react'\nimport './Welcome.css'\n\nconst instructions = ''\n\nfunction Welcome (props) {\n    const { saveName, name } = props\n    const [userName, setUserName] = useState(name)\n    const [isValid, setIsValid] = useState(true)\n\n    const handleSetName = (e) => {\n        const n = e.target.value\n        setUserName(n)\n    }\n\n    const handleSaveName = (e) => {\n        e.preventDefault()\n\n        if (!userName.trim()) {\n            setIsValid(false)\n            return\n        }\n        setIsValid(true)\n        saveName(userName)\n    }\n\n    const showWelcome = (name) => {\n        if (name) {\n            return (\n                <div className={'col-md welcome-box'}>\n                    {`🏡 Welcome ${name}, practice make improvement so let's improvify! ✏️✏️✏️`}\n                </div>\n            )\n        }\n\n        return (\n            <div className={'col-md welcome-box'}>\n                <p><strong>Hey!</strong> Please enter your name (or something).</p>\n                <div className={'form-group'}>\n                    <label className={isValid ? '' : 'error'}>{`Name${isValid ? '' : ' is required'}`}</label>\n                    <input className={'form-control'} value={userName} onChange={handleSetName} placeholder={'Enter your name here'} required />\n                </div>\n                <button onClick={handleSaveName} className={'btn btn-primary btn-lg name-btn'}>Save</button>\n            </div>\n        )\n    }\n\n    return (\n        <>\n            <div className={'row'}>\n                {showWelcome(name)}\n            </div>\n        </>\n    )\n}\n\nexport default Welcome","import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport Welcome from '../welcome/Welcome'\n\nimport './StartPage.css'\n\nfunction StartPage (props) {\n\n    const userName = localStorage.getItem('userName') || ''\n    const [name, setName] = useState(userName)\n\n\n    const setUserName = (n) => {\n        setName(n)\n        localStorage.setItem('userName', n)\n    }\n\n    return (\n        <>\n            <Welcome name={name} saveName={setUserName}/>\n            <hr/>\n            <div className={'row'}>\n                <div className={'col-md text-center'}>\n                    <h4>Select one of the activities below.</h4>\n                    <div className={'toc'}>\n                        <ul className={'list-group'}>\n                            <li className={'list-group-item'}><Link to=\"/rounding\">Rounding Big Numbers</Link></li>\n                            <li className={'list-group-item'}><Link to=\"/places\">Place Values</Link></li>\n                            <li className={'list-group-item'}><Link to=\"/estimate-line\">Estimating - Number Line</Link></li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n\n        </>\n    )\n}\n\nexport default StartPage","import React, { useState, useRef, useEffect } from 'react'\nimport { round } from '../../utils/maths'\nimport qrcode from 'qrcode'\nimport randomInt from 'random-int'\n\nimport './EstimateLine.css'\nimport numberToWords from \"number-to-words\";\n\nconst activityId = 'estimate_line'\nconst instructions =  (<p>Tap on the number line to indicate where you think the <span className={'highlight'}>BLUE</span> number below is located.</p>)\n\nfunction EstimateLine ()  {\n    const canvasRef = useRef(null)\n    const lineCanvasRef = useRef(null)\n    const initialQuestion = randomInt(100, 100000)\n    const [question, setQuestion] = useState(initialQuestion)\n    const [resolution, setResolution] = useState(null)\n    const [answerHistory, setAnswerHistory] = useState([])\n    const [isDone, setIsDone] = useState(false)\n    const [questionCount, setQuestionCount] = useState(1)\n\n    useEffect(() => {\n        const ctx = lineCanvasRef.current.getContext('2d')\n        ctx.beginPath()\n        ctx.moveTo(200, 0)\n        ctx.lineTo(210, 10)\n        ctx.lineTo(190, 10)\n        ctx.lineTo(200, 0)\n        ctx.fill()\n        ctx.lineTo(200, 1000)\n        ctx.stroke()\n\n        // Triangle at bottom\n        // ctx.lineTo(190, 990)\n        // ctx.lineTo(210, 990)\n        // ctx.lineTo(200, 1000)\n        // ctx.fill()\n\n        //Middle bar\n        ctx.beginPath()\n        ctx.moveTo(210, 500)\n        ctx.lineTo(190, 500)\n        ctx.stroke()\n\n        //Top middle bar\n        ctx.beginPath()\n        ctx.moveTo(210, 750)\n        ctx.lineTo(190, 750)\n        ctx.stroke()\n\n        //Bottom middle bar\n        ctx.beginPath()\n        ctx.moveTo(210, 250)\n        ctx.lineTo(190, 250)\n        ctx.stroke()\n\n        //Bottom bar\n        ctx.beginPath()\n        ctx.moveTo(210, 1000)\n        ctx.lineTo(190, 1000)\n        ctx.lineTo(190, 995)\n        ctx.lineTo(210, 995)\n        ctx.lineTo(210, 1000)\n        ctx.fill()\n\n        ctx.font = '14px serif';\n        ctx.fillText('100,000', 220, 14);\n        ctx.fillText('50,000', 220, 504);\n        ctx.fillText('0', 220, 998);\n\n    }, [])\n\n    const handleCorrectAnswer = (question, answer) => {\n        const newAnswerHistory = [...answerHistory, {question, answer, activityId, correct: true}]\n        sessionStorage.setItem('answerHistory', JSON.stringify(newAnswerHistory))\n        setResolution(1)\n        setAnswerHistory(newAnswerHistory)\n    }\n\n    const handleIncorrectAnswer = (question, answer) => {\n        const newAnswerHistory = [...answerHistory, {question, answer, activityId, correct: false}]\n        console.log(`Your answer: ${answer} vs the solution: ${question}`)\n        sessionStorage.setItem('answerHistory', JSON.stringify(newAnswerHistory))\n        setResolution(0)\n        setAnswerHistory(newAnswerHistory)\n    }\n\n    const handleDone = () => {\n        // generate QR code for parents\n        const kid = sessionStorage.getItem('userName') || 'Your kid'\n        setResolution(null)\n        setIsDone(true)\n        const qrContent = `${kid} answered ${answerHistory.filter(x => x.correct === true && x.activityId === activityId).length} of ${answerHistory.length} estimation (number line) problems correctly on ${new Date()}`\n        qrcode.toCanvas(canvasRef.current, qrContent, (err) => console.log(err))\n    }\n\n    const getNext = (e) => {\n        e.preventDefault()\n        setResolution(null)\n        setQuestionCount(questionCount + 1)\n        const newQuestion = randomInt(100, 100000)\n        setQuestion(newQuestion)\n    }\n\n    const showAlert = (mode) => {\n        switch (mode) {\n            case 0:\n                return (<div className={'alert alert-danger'}>🐳🐳🐳 That's just a bit off, please try again. <button className={'btn btn-danger'} onClick={getNext}>Skip this one</button></div>)\n            case 1:\n                return (<div className={'alert alert-success'}>🎉🎉🎉 Wow, that was an awesome estimate, good job! <button className={'btn btn-success'} onClick={getNext}>Next</button></div>)\n            default:\n                return null\n        }\n    }\n\n    const handleSubmit = (e) => {\n        const canvas = e.target\n        const dims = canvas.getBoundingClientRect()\n        console.log('dims:', dims)\n        console.log(e.clientX, e.clientY)\n        const x = e.clientX - Math.trunc(dims.left)\n        const y = e.clientY - Math.trunc(dims.top)\n\n        const guess = Math.abs((y * 100) - 100000)\n        console.log('guess:', guess)\n        const diff = Math.abs(guess - question)\n        console.log ('DIFF: ', diff)\n        let threshold = parseInt(localStorage.getItem(`${activityId}_threshold`))\n        threshold = isNaN(threshold) ? 5000 : threshold\n        console.log('treshold:: ',threshold)\n\n        window.scrollTo(0, 0)\n\n        if (diff <= threshold) {\n            handleCorrectAnswer(question, guess)\n        }\n        else {\n            handleIncorrectAnswer(question, guess)\n        }\n    }\n\n    return (\n        <>\n            <div className={'row'}>\n                <div className={'col-md-10'}>\n                    <h2>Estimating - Number Line)</h2>\n                    <h4>Instructions</h4>\n                    {instructions}\n                </div>\n                <div className={'col-md-2 question-no'}>Question #: {questionCount}</div>\n            </div>\n            <div className={'row'}>\n                <div className={'col-md target-number'}><span className={'target-number-pre'}>Where does this number fit on the number line: </span>{numberToWords.toWords(question)}?</div>\n            </div>\n            <div className={'row'}>\n                <div className={'col-md'}>\n                    {showAlert(resolution)}\n                </div>\n            </div>\n            <div className={'row'}>\n                <div style={{visibility: isDone ? 'visible' : 'hidden', display: isDone ? 'block': 'none'}} className={'col-md text-center'}>\n                    <h4>Show this to an adult so they can scan it.</h4>\n                    <canvas width={400} height={400} ref={canvasRef}></canvas>\n                </div>\n            </div>\n            <div style={{visibility: !isDone ? 'visible' : 'hidden', display: !isDone ? '': 'none'}} className={'row'}>\n                <canvas className={'number-line'} onClick={handleSubmit} width={400} height={1000} ref={lineCanvasRef}></canvas>\n            </div>\n            <div className={'row btn-row'}>\n                <div className={'col-md-4'}></div>\n                <div className={'col-md-4'}>\n                    <button className={'btn btn-warning btn-lg btn-block'} onClick={handleDone}>I'm Done</button>\n                </div>\n                <div className={'col-md-4'}></div>\n            </div>\n        </>\n    )\n}\n\nexport default EstimateLine","import React from 'react'\nimport { HashRouter as Router, Switch, Route} from 'react-router-dom'\nimport ErrorPage from './components/error-page/ErrorPage'\nimport Rounding from './components/rounding/Rounding'\nimport Places from './components/places/Places'\nimport StartPage from './components/start-page/StartPage'\nimport EstimateLine from \"./components/estimate-line/EstimateLine\";\n\nconst Routes = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route path={'/home'} component={StartPage}/>\n                <Route path={'/places'} component={Places} />\n                <Route path={'/rounding'} component={Rounding} />\n                <Route path={'/estimate-line'} component={EstimateLine} />\n                <Route path={'/'} component={ErrorPage} />\n            </Switch>\n        </Router>\n    )\n}\n\nexport default Routes\n","import React from 'react';\nimport Routes from './Routes'\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className=\"container\">\n        <main>\n            <div className={'row'}>\n                <div className={'col-md text-center'}>\n                    <h1 className={'app-title'}><a href={\"#/home\"}>Improvify</a></h1>\n                    <p>Because practice is waaaayyyyyyy better with emojis 🤓😎🤩🥳🤪</p>\n                    <hr/>\n                </div>\n            </div>\n            <Routes/>\n        </main>\n      </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}